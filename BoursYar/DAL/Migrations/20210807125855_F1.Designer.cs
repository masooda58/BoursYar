// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(WDbContext))]
    [Migration("20210807125855_F1")]
    partial class F1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Arabic_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.AllNamadInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AllStocks")
                        .HasColumnType("bigint");

                    b.Property<long?>("BasisVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("ClosePriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CoBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceHigh")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceLow")
                        .HasColumnType("bigint");

                    b.Property<string>("Eps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinalPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinalPriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalPriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FirstPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("FreeFloat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HighestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LowestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MarketValue")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamadCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PE")
                        .HasColumnType("float");

                    b.Property<long?>("RealBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellVolume")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("The1_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("YesterdayPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AllNamadInfo");
                });

            modelBuilder.Entity("DAL.AllNamadInfo_Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AllStocks")
                        .HasColumnType("bigint");

                    b.Property<long?>("BasisVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("ClosePriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CoBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceHigh")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceLow")
                        .HasColumnType("bigint");

                    b.Property<string>("Eps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinalPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinalPriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalPriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FirstPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("FreeFloat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HighestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LowestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MarketValue")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamadCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PE")
                        .HasColumnType("float");

                    b.Property<long?>("RealBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellVolume")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("The1_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("YesterdayPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AllNamadInfo_Daily");
                });

            modelBuilder.Entity("DAL.AllNamadOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AllStocks")
                        .HasColumnType("bigint");

                    b.Property<long?>("BasisVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClosePriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("ClosePriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CoBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoSellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceHigh")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyPriceLow")
                        .HasColumnType("bigint");

                    b.Property<string>("Eps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinalPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinalPriceChange")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalPriceChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FirstPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("FreeFloat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HighestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstanceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LowestPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MarketValue")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamadCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PE")
                        .HasColumnType("float");

                    b.Property<long?>("RealBuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealBuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealSellVolume")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("The1_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The1_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The2_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_BuyVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("The3_SellVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeVolume")
                        .HasColumnType("bigint");

                    b.Property<long?>("YesterdayPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AllNamadOption");
                });

            modelBuilder.Entity("DAL.Arz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Change")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JalaliLastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MinPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Arz");
                });

            modelBuilder.Entity("DAL.BourseIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Index")
                        .HasColumnType("float");

                    b.Property<double>("IndexChange")
                        .HasColumnType("float");

                    b.Property<double>("IndexChangePercent")
                        .HasColumnType("float");

                    b.Property<double>("IndexH")
                        .HasColumnType("float");

                    b.Property<double>("IndexHChange")
                        .HasColumnType("float");

                    b.Property<double>("IndexHChangePercent")
                        .HasColumnType("float");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MarketValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TradeNumber")
                        .HasColumnType("bigint");

                    b.Property<double>("TradeValue")
                        .HasColumnType("float");

                    b.Property<double>("TradeVolume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BourseIndix");
                });

            modelBuilder.Entity("DAL.CallWebServiceSetting", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("ClassJsonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Faal")
                        .HasColumnType("bit");

                    b.Property<string>("FinishTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedAddDate")
                        .HasColumnType("bit");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("CallWebServiceSetting");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.AllNamadInfo, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.AllNamadInfo, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "AllNamadInfo",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&all&type=0"
                        },
                        new
                        {
                            Code = 2,
                            ClassJsonType = "DAL.Index",
                            ClassType = "DAL.BourseIndex",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "market_bourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=market_bourse"
                        },
                        new
                        {
                            Code = 3,
                            ClassJsonType = "DAL.Index",
                            ClassType = "DAL.BourseIndex",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "market_farabourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=market_farabourse"
                        },
                        new
                        {
                            Code = 4,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.IndusteryIndex, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.IndusteryIndex, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "IndusteryIndex",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=indices"
                        },
                        new
                        {
                            Code = 5,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.FavNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.FavNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "fav_namad_bourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=fav_namad_bourse"
                        },
                        new
                        {
                            Code = 6,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.FavNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.FavNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "fav_namad_farabourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=fav_namad_farabourse"
                        },
                        new
                        {
                            Code = 7,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.IndNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.IndNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "ind_namad_bourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=ind_namad_bourse"
                        },
                        new
                        {
                            Code = 8,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.IndNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.IndNamad, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "ind_namad_farabourse",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&market=ind_namad_farabourse"
                        },
                        new
                        {
                            Code = 9,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.Codal, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.Codal, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "Codal",
                            NeedAddDate = false,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&codal=all&p=1"
                        },
                        new
                        {
                            Code = 10,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.PayamNazer, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.PayamNazer, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "16:55:00",
                            Interval = 120,
                            Name = "Payamnazer",
                            NeedAddDate = false,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&inspect=all"
                        },
                        new
                        {
                            Code = 11,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.Khodro, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.Khodro, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "18:30:00",
                            Interval = 3600,
                            Name = "Khodro",
                            NeedAddDate = false,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&car=all"
                        },
                        new
                        {
                            Code = 12,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.Crypto, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "DAL.CryptoAll",
                            Faal = true,
                            FinishTime = "18:30:00",
                            Interval = 3600,
                            Name = "Crypto",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&crypto_v2=all"
                        },
                        new
                        {
                            Code = 13,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.Arz, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.Arz, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "18:30:00",
                            Interval = 3600,
                            Name = "Arz",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&currency"
                        },
                        new
                        {
                            Code = 14,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.AllNamadInfo_Daily, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.AllNamadInfo_Daily, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "18:30:00",
                            Interval = 3600,
                            Name = "AllNamadInfo_Daily",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&all&type=0"
                        },
                        new
                        {
                            Code = 15,
                            ClassJsonType = "System.Collections.Generic.List`1[[DAL.AllNamadOption, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            ClassType = "System.Collections.Generic.List`1[[DAL.AllNamadOption, DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
                            Faal = true,
                            FinishTime = "18:30:00",
                            Interval = 3600,
                            Name = "AllNamadOption",
                            NeedAddDate = true,
                            StartTime = "14:50:00",
                            Url = "https://sourcearena.ir/api/?token=722b65c8184942a55aebc5253895f8d9&all&type=1"
                        });
                });

            modelBuilder.Entity("DAL.Codal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("excel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("letter_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pdf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Codal");
                });

            modelBuilder.Entity("DAL.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangePercent24H")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketCap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Volume24H")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crypto");
                });

            modelBuilder.Entity("DAL.FavNamad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClosePrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosePriceChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalPriceChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowestPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("N")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Volume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FavNamad");
                });

            modelBuilder.Entity("DAL.IndNamad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndNamad");
                });

            modelBuilder.Entity("DAL.IndusteryIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Change")
                        .HasColumnType("float");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<DateTime>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Percent")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReqDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShamsiDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IndusteryIndex");
                });

            modelBuilder.Entity("DAL.Khodro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MarketPrice")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Khodro");
                });

            modelBuilder.Entity("DAL.Logger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReqTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Logger");
                });

            modelBuilder.Entity("DAL.PayamNazer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Head")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayamNazer");
                });
#pragma warning restore 612, 618
        }
    }
}
